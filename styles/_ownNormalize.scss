@use "./helpers/index" as *;

/*
  Нормализация блочной модели
*/
*,
*::before,
*::after {
  box-sizing: border-box;
}



/*
  Устанавливаем height в соответствующее значение. Это пригодится, например, 
  когда нужно будет "прижать" футер к низу

  Убираем скачок интерфейса по горизонтали при появлении или исчезновении 
  скроллбара
*/
html {
  height: 100%;

  //scrollbar-gutter: stable;
}



/*
  Делаем плавный скролл
*/
html,
:has(:target) {
  scroll-behavior: smooth
}



/*
  Устанавливаем min-height в соответствующее значение. Это пригодится, например, 
  когда нужно будет "прижать" футер к низу)

  Убираем отступы у body, который может быть в некоторых браузерах

  Унифицируем интерлиньяж 
*/
body {
  min-height: 100%;
  padding: 0;
  margin: 0;
  
  line-height: 1.5;
}



/*
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
*/
 a:where([class]) {
  display: inline-flex;
}



/*
  Упрощаем работу с изображениями и видео
*/
img, 
video {
  display: block;
  max-width: 100%;
  height: auto;
}



/*
 Чиним баг задержки смены цвета при взаимодействии с svg-элементами
*/
svg * {
  transition-property: fill, stroke;
}



/*
  Приводим к единому цвету svg-элементы, за исключением тех, у которых уже 
  указан атрибут fill со значением "none" или начинается с "url"
*/
:where([fill]:not(
  [fill="none"],
  [fill^="url"]
)) {
  fill: currentColor;
}



/*
  Приводим к единому цвету svg-элементы, за исключением тех, у которых уже 
  указан атрибут stroke со значением "none"
*/
:where([stroke]:not(
  [stroke="none"],
  [stroke^="url"]
)) {
  stroke: currentColor;
}




/*
  Наследуем свойства шрифта для полей ввода
*/
input,
textarea,
select,
button {
  font: inherit;
}

 

/*
  Убираем отступы нужным элементам, у которых есть атрибут class

  Убираем границу у fieldset, у которых есть атрибут class
*/
:is(
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  dl
):where([class]) {
  margin-block: 0;
}
 
dd:where([class]) {
  margin-left: 0;
}

:is(blockquote, figure):where([class]) {
  margin: 0;
}

:is(ul, ol):where([class]) {
  padding-left: 0;
  margin-block: 0;
}
 
fieldset:where([class]) {
  margin-left: 0;
  padding: 0;

  border: none;
}



/*
 Убираем стандартный маркер маркированному списку, у которого есть атрибут 
 class
*/
ul:where([class]) {
  list-style: none;
}



/*
  Изменяет начертание в address на нормальное
*/
address[class] {
  font-style: normal;
}



/*
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
 p {
  --paragraphMarginBottom: #{rem(24)};

  margin-block: 0;
}



/*
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}



/*
  Приведение рамок таблиц в классический 'collapse' вид
*/
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}



/*
  Удаляем все анимации и переходы для людей, которые предпочитают их не 
  использовать
*/
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}